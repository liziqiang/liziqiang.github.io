<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[css]]></title>
    <url>%2F2019%2F02%2F25%2Fcss%2F</url>
    <content type="text"><![CDATA[相对于父元素fixed定位，给父元素增加以下样式 1transform: translate(0, 0) Element.scrollTop 123The Element.scrollTop property gets or sets the number of pixels that an element&apos;s content is scrolled vertically.An element&apos;s scrollTop value is a measurement of the distance from the element&apos;s top to its topmost visible content. When an element&apos;s content does not generate a vertical scrollbar, then its scrollTop value is 0.PS: Element需要是设置了overflow: scroll的元素]]></content>
  </entry>
  <entry>
    <title><![CDATA[webpack]]></title>
    <url>%2F2019%2F02%2F21%2Fwebpack%2F</url>
    <content type="text"><![CDATA[Webapck打包问题 contenthash问题 webpack@3中不支持，需要配置extract-text-plugin使用 PS：如果有多个entry的话必须使用contenthash，chunkhash会出现文件改动了但是hash不变的问题:😶]]></content>
  </entry>
  <entry>
    <title><![CDATA[html技巧]]></title>
    <url>%2F2019%2F02%2F15%2Fhtml%2F</url>
    <content type="text"><![CDATA[把html页面的title设置为空格1document.title=&apos;\u200E&apos;]]></content>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac技巧]]></title>
    <url>%2F2019%2F02%2F13%2Fmac%2F</url>
    <content type="text"><![CDATA[清除右键多余打开选项 1/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -domain local -domain user;killall Finder;echo &quot;Open With has been rebuilt, Finder will relaunch&quot; Mojave下程序打开黑屏 12defaults delete -g NSRequiresAquaSystemAppearancedefaults write net.battle.app NSRequiresAquaSystemAppearance True 配置sudo免密 1234567sudo visudo 或者 sudo vi /etc/sudoers# lizq账户所有命令sudo免密码lizq ALL=(ALL) NOPASSWD: ALL# lizq账户yarn命令sudo免密码lizq ALL=(ALL) NOPASSWD: /usr/local/bin/yarn# 配合使用还可以在bashrc或者zshrc中设置aliasalias yarn="sudo yarn" 让终端 sudo 时用上 Touch ID修改/etc/pam.d/sudo这个文件，修改后如下 123456auth sufficient pam_tid.soauth sufficient pam_smartcard.soauth required pam_opendirectory.soaccount required pam_permit.sopassword required pam_deny.sosession required pam_permit.so 休眠配置 123456789101112131415161718192021222324251、重启并按com+r；2、终端输入后回车：csrutil disable3、正常重启（不按com+r）；4、终端输入后回车：ioreg -l | grep board-id5、上一步执行后终端会出现类似"board-id" = &lt;"Mac-06F11FD93F0323C5"&gt;，请注意每部电脑显示的id都不同，请记录所显示的id；6、终端输入后回车：cd /System/Library/Extensions/IOPlatformPluginFamily.kext/Contents/PlugIns/X86PlatformPlugin.kext/Contents/Resources7、终端输入后回车： sudo -s8、输入密码9、（备份）终端输入后回车：cp Mac-06F11FD93F0323C5.plist Mac-06F11FD93F0323C5.plist.bak请注意上面的06F11FD93F0323C5要换为上面第5步所显示的id，下同。10、终端输入后回车：nano Mac-06F11FD93F0323C5.plist11、大约250行找到“TCPKeepAliveDuringSleep” 把其值改为 false, the “NotificationWake” 其值改为 false and “DNDWhileDisplaysSleep” 其值改为true:&lt;key&gt;TCPKeepAliveDuringSleep&lt;/key&gt;&lt;false/&gt;&lt;key&gt;NotificationWake&lt;/key&gt;&lt;false/&gt;&lt;key&gt;DNDWhileDisplaySleeps&lt;/key&gt;&lt;true/&gt;12、更改后储存退出文本编辑；13、重启并按com+r；14、终端输入后回车：csrutil ensable15、正常重启（不按com+r）；16、终端输入后回车：ioreg -l | grep IOPlatformFeatureDefaults17、如果显示：| | | "IOPlatformFeatureDefaults" = &#123;"TCPKeepAliveDuringSleep"=No,"DNDWhileDisplaySleeps"=Yes,"TCPKeepAliveExpirationTimeout"=43200,"NotificationWake"=No&#125;这就成功了。 fzf模糊搜索匹配 1234567# 安装brew install fzf# 使用ctrl + r 替代原有的命令行搜索功能ctrl + t 交互式的文件搜索功能，ctrl + n下一个，ctrl + p 上一个# 除了少数命令，比如 kill，ssh 等，绝大多数命令需要以 ** 为前缀触发 fzf补全。比如：cd **&lt;Tab&gt;]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue记录~]]></title>
    <url>%2F2019%2F02%2F13%2Fvue%2F</url>
    <content type="text"><![CDATA[阻止元素内滚动冒泡到父级 1234567891011121314151617181920directives: &#123; wheel: &#123; bind(el, binding) &#123; let throttle = Chain(binding, &apos;value.throttle&apos;) || 0; el.event = function(event) &#123; let deltaY = event.deltaY; let scrollTop = el.scrollTop; let offsetHeight = el.offsetHeight; let scrollHeight = el.scrollHeight; if (deltaY &gt; 0 &amp;&amp; (scrollTop + offsetHeight + throttle &gt;= scrollHeight) || deltaY &lt; 0 &amp;&amp; scrollTop &lt;= 0) &#123; preventDefault(event); &#125; &#125;; el.addEventListener(&apos;wheel&apos;, el.event, false); &#125;, unbind(el) &#123; el.removeEventListener(&apos;wheel&apos;, el.event); &#125; &#125;&#125; 在console中触发事件 1__VUE_DEVTOOLS_GLOBAL_HOOK__.Vue.prototype.$bus.$emit('finance_show_application') html中属性用:xxx-yyy=“mmmTcc”，如果用:xxxYyy会导致js压缩问题 v-model深度绑定字符串 添加全局方法 12345678910111213// 根据字符串设置或获取值const $hack = &#123; get( target, key ) &#123; return new Function( 'obj', `try&#123; return obj.$&#123;key&#125; &#125;catch(e)&#123;&#125;` )( target ); &#125;, set( target, key, value ) &#123; new Function( 'obj', 'v', `try&#123; obj.$&#123;key&#125; = v &#125; catch(e) &#123;&#125;` )( target, value ); &#125;, clone( target, key, source ) &#123; new Function( 'obj', 'v', `try&#123; obj.$&#123;key&#125; = v.$&#123;key&#125; &#125; catch(e) &#123;&#125;` )( target, source ); &#125;&#125;;Vue.prototype.$hack = $hack; 添加v-dynamic-model指令 12345678910111213141516171819202122export default &#123; bind( el, binding, vnode ) &#123; let _context = vnode.context; let _key = binding.value; let instance = _context.$refs[ _key ]; console.log( '[DIRETIVE]', _context.$hack ); if ( !!binding.value &amp;&amp; instance ) &#123; let child = instance[ 0 ]; child.value = _context.$hack.get( _context, _key ); child.$on( 'input', ( e ) =&gt; &#123; _context.$hack.set( _context, _key, e ); &#125; ); &#125; &#125;, unbind( el, binding, vnode ) &#123; &#125;, inserted( el, binding, vnode ) &#123; &#125;, update( el, binding, vnode ) &#123; &#125;&#125;; 点击弹窗外部隐藏弹窗，使用指令实现 12345678910111213export default &#123; bind : function( el, binding, vnode ) &#123; el.event = function( event ) &#123; if ( !(el === event.target || el.contains( event.target )) ) &#123; vnode.context[ binding.expression ]( event ); &#125; &#125;; document.body.addEventListener( 'click', el.event ); &#125;, unbind : function( el ) &#123; document.body.removeEventListener( 'click', el.event ); &#125;&#125;; ​ 父组件触发子组件事件 1234567891011121314151617181920212223var child = &#123; created: function()&#123; this.$on('click-child', function()&#123; console.log('send ajax here'); &#125;); &#125;, template: '&lt;div&gt;&lt;/div&gt;'&#125;;var app = &#123; template: '&lt;div&gt;&lt;button v-on:click="clickParent"&gt;点击&lt;/button&gt;&lt;child v-ref:child&gt;&lt;/child&gt;&lt;div&gt;', methods: &#123; clickParent: function()&#123; this.$refs.child.$emit('click-child'); &#125; &#125;, components: &#123; child: child &#125;&#125;;new Vue(&#123;el: 'body', components: &#123;app: app&#125;&#125;); vee-validate的inject，如果使用slot需要在slot的元素那里加上inject: [‘$validator’] webpack打包优化 commonsChunks优化 123456789101112131415161718192021222324252627// 生成除vendor、app之外的common chunksbuildExtraCommonChunks(list = []) &#123; let chunks = []; list.forEach((chunk) =&gt; &#123; let isObject = !!(typeof chunk === 'object'); let chunkName = isObject ? chunk.name : chunk; let chunkFileName = isObject ? chunk.filename || chunk.name : chunk; let chunkPrefix = isObject &amp;&amp; chunk.prefix ? chunk.prefix : 'node_modules'; chunks.push( new webpack.optimize.CommonsChunkPlugin(&#123; names: ['app'], children: true, async: chunkFileName, minChunks(module, count) &#123; return ( module.resource &amp;&amp; module.resource.includes( `$&#123;chunkPrefix&#125;/$&#123;chunkName&#125;` ) &amp;&amp; count &gt; 1 ); &#125; &#125;) ); &#125;); return chunks;&#125; code spliting(import) paralleUglifyJs &amp; HappyPack]]></content>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
</search>
